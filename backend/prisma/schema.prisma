// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ------------- User -------------
enum UserRole {
  ADMIN
  DOCTOR
  PATIENT
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      UserRole @default(PATIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctor   Doctor? @relation(fields: [doctorId], references: [id])
  doctorId Int?

  patient   Patient? @relation(fields: [patientId], references: [id])
  patientId Int?
}

/// ------------- Patient -------------
enum BloodType {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

model Patient {
  id               Int               @id @default(autoincrement())
  insurance_num    Int               @unique
  name             String
  paternalSurname  String
  maternalSurname  String
  dateOfBirth      DateTime
  address          String
  phone            String
  email            String            @unique
  bloodType        BloodType         @default(O_POS)
  allergy          PatientAllergy[]
  hospitalizations Hospitalization[]
  appointments     Appointment[]
  user             User[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model PatientAllergy {
  id        Int      @id @default(autoincrement())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int
  allergy   Allergy  @relation(fields: [allergyId], references: [id])
  allergyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Allergy {
  id               Int              @id @default(autoincrement())
  name             String
  patientAllergies PatientAllergy[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Hospitalization {
  id            Int       @id @default(autoincrement())
  entryDate     DateTime
  dischargeDate DateTime?
  reason        String
  patient       Patient   @relation(fields: [patientId], references: [id])
  patientId     Int
  room          Room      @relation(fields: [roomNumber], references: [number])
  roomNumber    Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum RoomState {
  OCCUPIED
  FREE
  MAINTENANCE
}

enum RoomType {
  SINGLE
  DOUBLE
}

model Room {
  number           Int               @id @default(autoincrement())
  type             RoomType          @default(SINGLE)
  floor            String
  state            RoomState
  hospitalizations Hospitalization[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

/// ------------- Doctor -------------
model Doctor {
  id               Int                @id @default(autoincrement())
  professionalID   String             @unique
  name             String
  paternalSurname  String
  maternalSurname  String
  yearsOfExp       Int
  phone            String
  email            String             @unique
  doctorSpeciality DoctorSpeciality[]
  appointments     Appointment[]
  user             User[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model DoctorSpeciality {
  id           Int        @id @default(autoincrement())
  doctor       Doctor     @relation(fields: [doctorId], references: [id])
  doctorId     Int
  speciality   Speciality @relation(fields: [specialityId], references: [code])
  specialityId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Speciality {
  code               Int                @id @default(autoincrement())
  name               String             @unique
  description        String
  doctorSpecialities DoctorSpeciality[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

/// ------------- Appointment -------------
enum AppointmentState {
  PENDING
  MADE
  CANCELED
}

model Appointment {
  id      Int              @id @default(autoincrement())
  date    DateTime
  reason  String
  state   AppointmentState @default(PENDING)
  consult Consult?

  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  Int
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Consult {
  id            Int         @id @default(autoincrement())
  diagnosis     String
  observations  String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId Int         @unique
  treatment     Treatment   @relation(fields: [treatmentId], references: [id])
  treatmentId   Int         @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

/// ------------- Treatment -------------
enum TimeUnit {
  MINUTE
  HOUR
  DAY
  MONTH
  YEAR
}

model Treatment {
  id                Int                 @id @default(autoincrement())
  consult           Consult?
  treatmentMedicine TreatmentMedicine[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model TreatmentMedicine {
  id            Int      @id @default(autoincrement())
  treatmentId   Int
  medicineId    Int
  dose          Decimal
  frequency     Int
  frequencyUnit TimeUnit @default(DAY)
  duration      Int
  durationUnit  TimeUnit @default(DAY)
  observations  String

  treatment Treatment @relation(fields: [treatmentId], references: [id])
  medicine  Medicine  @relation(fields: [medicineId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

/// ------------- Medicine -------------
model Medicine {
  id                   Int                 @id @default(autoincrement())
  code                 String              @unique
  tradeName            String
  activeIngredient     String
  laboratory           String
  contraindications    String?
  concentration        Int
  recommendedDosage    Int
  treatmentMedicine    TreatmentMedicine[]
  teraputicCategoryid  Int
  pharmaceuticalFormid Int

  terapeuticCategory TerapeuticCategory @relation(fields: [teraputicCategoryid], references: [id])
  pharmaceuticalForm PharmaceuticalForm @relation(fields: [pharmaceuticalFormid], references: [id])
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model TerapeuticCategory {
  id        Int        @id @default(autoincrement())
  name      String
  medicines Medicine[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model PharmaceuticalForm {
  id        Int        @id @default(autoincrement())
  name      String
  medicines Medicine[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
